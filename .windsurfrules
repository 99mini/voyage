# Voyage

> zero voyage is a collection of SaaS apps. 

# AI 응답 규칙
- !!로 감싸진 부분은 반드시 지켜라
예시 !중요! 한국말로 설명하라
예시 !readonly! _docs/PRD.md는 수정하지 않는다.

# 프로젝트 구조

- 모노레포로 구성.
- apps 하위에 frontend, server, cli.
- packages 하위에 vds(Voyage Design System), utils.
- 기술 스택
  - 공통: Node.js, TypeScript, pnpm, prettier, eslint, pocketbase.
  - frontend: React(혹은 Next.js), Vite, Tailwind, Shadcn.
  - server: Nestjs, Express.

# 응답 규칙

1. !중요! 한국말로 설명하라
2. 비지니스 로직을 확인할 때는 _docs/PRD.md 파일을 참고하라. _docs/PRD.md는 수정하지 않는다. !readonly!
3. 새로운 패키지 구성 규칙
- 패키지를 구성할 때는 상위 디렉토리의 packages.json과 tsconfig.json을 참고하여 중복된 코드를 줄여라
- root에 선언된 package.json에 설치된 라이브러리를 패키지에 추가하지 말아라
4. Frontend 앱 구성 규칙
- 상태 관리 라이브러리로 zustand, @tanstack/react-query를 활용하여라
- Page Driven Development. 페이지를 기준으로 폴더를 구성하라
- jsx component의 타입에 React.FC를 사용하지 않는다
예시
src/pages/home/[components|hooks|utils]: home page에 관련된 소스 코드 폴더 
src/[components|hooks|utils]: 공통 소스 코드 폴더
- ui를 구성할 때는 packages/vds를 활용하라. packages/vds에 없고 공통으로 사용될 컴포넌트는 packages/vds에 새롭게 만들어라
- ui를 새롭게 만들때는 shadcn를 활용하라. shadcn를 사용할 때는 `npx shadcn` cli를 활용하라 

5. Server 앱 구성 규칙
- 프로젝트 규칙을 확인할 때는 README.MD 파일을 참고하라
- DDD(Domain Driven Design)를 활용하라.

